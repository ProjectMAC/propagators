Vision: Expressiveness!

Programming language captures all possible regularity and structure

Probability is easy, programming is hard.  So probability should be
subservient.
- I want inference in my toolkit alongside everything else

Scheme scheme.scm

Parens matter!
prefix notation
- precedence is a consequence
define
- lexical scope
let
return last form; tail recursion

procedures are values too
+ is just a procedure
lambda
closures
hyphens and other punctuation are ok in symbols (?, ! convention)

cons, car, cdr
quote, for-each

Demo

mit-scheme
(load "~/probscheme/load-probscheme")

Rollin' some dice: rolling-dice.scm
- discrete-select is part of Probabilistic Scheme (actually a macro)
- roll-two-dice is a procedure
- we can make a distribution out of it
  - and operate on that distribution (sample; convert to association list)
- Note the aliasing effect!

Bayes on coin fairness: one-coin.scm

Hierarchical Bayes for contents of bags: hierarchical-bayes.scm
- Note reuse of previous coin model
- And redefining the experiment changes the experiment-result function

(N.B. All discrete)

Evaluating up to 24: twenty-four.scm

These are the efforts I am most familiar with

Ken Shan at Rutgers and Oleg Kiselyov at Fleet Numerical Meteorology
and Oceanography Center in Monterey, CA

Noah Goodman and company at Brain and Cognitive Sciences at MIT

Avi Pfeffer at Harvard

What else to say about "who is doing it"?

What to say about the individual systems?

Dilemma

Propagators!

Contributions
