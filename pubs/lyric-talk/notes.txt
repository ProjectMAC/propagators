Vision: Expressiveness!

Programming language captures all possible
regularity and structure

Probability is easy, programming is hard.
- probability should be subservient
- inference in my toolkit, with everything else

Scheme scheme.scm

Parens matter!
- but don't count close parens
prefix notation
- precedence is a consequence
define
- lexical scope
let
return last form; tail recursion

More Scheme

procedures are values too
+ is just a procedure
lambda
closures
hyphens and other punctuation are ok in symbols
(?, ! convention)

cons, car, cdr
quote, for-each

Rollin' some dice: rolling-dice.scm
- discrete-select is part of Probabilistic Scheme
  - (actually a macro, to not over-evaluate)
- roll-two-dice is a procedure
- we can make a distribution out of it
  - and operate on that distribution
  - sample; convert to association list
- pp is a Scheme procedure that pretty-prints

Note the aliasing effect!

Bayes on coin fairness: one-coin.scm
- draw the graphical model
- case is part of Scheme
- the coin procedure returns a procedure
- the data is a list of observed coin flips
- observe! introduces evidence in Prob Scheme
- for-each runs the given procedure on every
  item in the given list

hierarchical-bayes.scm for contents of bags
- draw the graphical model
- Note reuse of previous coin model
- The data are a list of lists of coin-flips
  - so we know how many coins we drew, and which
    flips were which coins
- And redefining the experiment changes the
  experiment-result function
- Note the difference between flipping one coin
  many times and flipping many coins once
- Note everything is discrete

Evaluating up to 24: twenty-four.scm
- Easy to write the generative grammar
- Need breadth-first search for this one!
- See why discrete-select had to be a macro
- The search is anytime; restartable

Many efforts -- these are familiar

Ken Shan at Rutgers and Oleg Kiselyov at Fleet
Numerical Meteorology and Oceanography Center in
Monterey, CA

Noah Goodman and company at Brain and Cognitive
Sciences at MIT

Avi Pfeffer at Harvard

All different

Probabilistic Scheme

Embedded => gets libraries, compiler, gc

Needs call-with-current-continuation
- not that easy to get!

Kiselyov and Shan

Also embedded - same benefits and challenges

The program being inferred is a black box:
The inference can't see its structure
- only "choose this", "reject that"
- "tree"

Oops

Stupid over-search

This particular one is easy to fix, but point
remains.

I know no way to win in Scheme.
Laziness helps, but maybe not enough.

Standalone systems can solve this problem

Church

Sampler
- (*still* muttering about exact inference)

Standalone => full access to running program
Possible execution traces => "graph"

M-H can be arranged to take only direct
consequences into account
- but walks over all steps in the program;
  big trouble in deterministic chunks

TODO Is there a picture I can draw?

IBAL

Also standalone

Exact
Custom idea of micro-factors
Variable Elimination
"Graph"!

Produces factors even for deterministic pieces

TODO Is there a picture I can draw?

Dilemma

Efficient tree or Slow graph?

Propagators!

My main research goal at MIT

Deal with graphs once --- lots of stuff embeds

Not the focus of this talk

Contributions
