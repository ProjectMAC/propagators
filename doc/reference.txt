Materials for the reference manual:
- delayed-propagator-constructor
- p:constant, e:constant
- the underlying pieces out of which things are built
  - copying cons?
- detail about let-cells-rec:
  Asterisk on "effectively": rather than a true direct
  interconnection, ``let-cells-rec`` creates extra cells that are then
  identified with the specified ones by mutual identity propagators.

- For each partial information type:
  - what it means
  - how to introduce it
  - how to operate with it
  - what is its equivalent? behavior
  - how it merges
  - when is it contradictory
  - what effect it has on binary-map
  - what effect it has on switch and d@
  - anything else


make-closure, make-e:closure
  Scheme procedures for directly constructing closure objects.  The
  closures are defined in diagram or expression style, respectively.

Document the generic operations system, including defining generics,
precedence of handlers, and tagging procedures as type testers for
performance; also use of SOS specializers as predicates directly.
Also the coersion subsystem?

Implicit Cell Syntax
----------------------------------------------------------------------

A quirky little feature, called
``%%``.  This is a Scheme object, therefore Scheme-Propagators syntax,
for controlling the argument position of the implicit cell that an
expression-style application will make and return.  Perhaps examples
are best::

  (e: foo bar)     ==  (e: foo bar %%)

  (e: foo %% bar)  ==  (let-cell new (p: foo new bar) new)

I borrowed this idea from Guy Steele's PhD thesis on constraint
languages, and it was a year between when I implemented it and
when I first used it.  The use case I do have is when I
want to make a new cell participate in an input position
in a constraint with some existing cells::

  (define-cell x)
  (define-cell z)
  (define-cell y (ce:+ x %% z))
  (add-content x 5)
  (add-content y 3)
  (run)
  (content z) ==> 8

Perhaps this use case could also be served by adding more
expression-style constraint procedures (namely ``ce:-``, which I do
not currently have), but then again maybe it's elegant.



			   Running Networks

initialize-scheduler
run
add-content
content

			      Debugging

name
cell?
propagator?
alert-all-propagators!
all-propagators
propagator-inputs
propagator-outputs
neighbors
cell-connections
cell-non-readers
network-group-of

draw:show-graph

			  Defining Networks

define-cell
let-cells
let-cell
let-cells*

make-cell

		       Propagator Constructors

p:+ e:+
p:- e:-
p:* e:*
p:/ e:/
p:abs e:abs
p:square e:square
p:sqrt e:sqrt
p:= e:=
p:< e:<
p:> e:>
p:<= e:<=
p:>= e:>=
p:not e:not
p:and e:and
p:or e:or
p:eq? e:eq?
p:eqv? e:eqv?
p:expt e:expt

(constant value) (p:constant value)
(e:constant value)

p:switch switch
e:switch

pass-through

conditional p:conditional
e:conditional

conditional-router p:conditional-router
conditional-wire
c:+
ce:+
c:*
ce:*
c:square
ce:square
c:not
ce:not
c:id
p:==
e:==
c:==
ce:==

p:carry-cons  e:carry-cons
p:carry-pair? e:carry-pair?
p:carry-car   e:carry-car
p:carry-cdr   e:carry-cdr

make-closure
make-e:closure
application p:apply
e:application e:application

		      Making Custom Propagators

propagatify

define-macro-propagator
named-macro-propagator
define-propagator-syntax
named-propagator-syntax
define-compound-propagator
named-compound-propagator

function->propagator-constructor
delayed-propagator-constructor
functionalize

function->cell-carrier-constructor
early-access-hack TODO

propagator
one-shot-propagator

		   Extant Partial Information Types

intervals  TODO flesh out the definition?
make-interval
interval?
interval-low
interval-high

supported values
supported
v&s-value
v&s-support
Any object can be used as a premise

truth maintenance
make-tms
tms-values
tms-query
kick-out!
bring-in!

binary-amb
p:amb e:amb
require p:require e:require
forbid p:forbid e:forbid
require-distinct
one-of e:one-of

			  Means of Extension

slotful-information-type

define-structure
defhandler
defhandler-coercing
declare-coersion-target
declare-coersion
declare-type-tester
guard

			 Points of Extension

generic-foo

merge
equivalent?
contradictory?
boring-effect?
generic-attach-support

binary-map
generic-unpack
generic-flatten

