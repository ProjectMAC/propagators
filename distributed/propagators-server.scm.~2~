
(define *propserver* (create-rpc-server))


; alist of name . cell
 
(define *propserver-public-cells*
  '())

(define (propserver-publish-cell! name cell)
  (let ((v (assoc name *propserver-public-cells*)))
    (if v
        (set-cdr! v cell)
        (set! *propserver-public-cells*
              (cons (cons name cell)
                    *propserver-public-cells*)))
    'ok))

(define (propserver-get-cell cell-name)
  (let ((v (assoc cell-name *propserver-public-cells*)))
    (if v
        (cdr v) ;; todo lock wrapper entity here?
        (error "unpublished cell" cell-name))))

(define *propserver-global-lock* (make-lock))
; TODO: console operations must be protected by lock!
; TODO: cell entity operations must be protected by lock!!

(define propagators-port 5390)
(define propagators-salt "MgF2")
(define propagators-salted-key "Ø3¯+c$\226\206ï²y\022Ù\036\\\005") ; yes this is ridiculous :P

; id symbol, salt, password hash, procedure

(define *propserver-service-table*
  `(
    (get-cell      ,propagators-salt ,propagators-salted-key
                   ,(lambda (cell-name)
                      (propserver-get-cell cell-name)))
    (cell-invoke   ,propagators-salt ,propagators-salted-key
                   ,(lambda (cell args)
                      (apply (entity-extra cell) args)))
    (run           ,propagators-salt ,propagators-salted-key
                   ,(lambda ()
                      (with-lock *propserver-global-lock*
                                 run)))
    ))


(define (propserver-accessor requested-thing-id password)
  (let ((thing-record (assoc requested-thing-id *propserver-service-table*)))
    (if (not thing-record)
	(error 'unknown-service-id requested-thing-id)
	(let* ((salt (cadr thing-record))
	       (salted-pw (string-append propagators-salt password))
	       (salted-hash (md5-string salted-pw)))
	  (if (string=? salted-hash (caddr thing-record))
	      (cadddr thing-record)
	      (begin
		(sleep-current-thread 1000)
		(error 'unauthorized)))))))

(register-rpc-procedure *propserver* "access-thing" propserver-accessor)


(define (server-start #!optional address port)
  (let ((port (if (default-object? port) propagators-port port))
	(address (if (default-object? address) (host-address-any) address)))
    (write-line "About to start rpc server")
    (start-rpc-server *propserver* port address)
    (write-line "Started rpc server")))

(define (server-stop)
  (stop-rpc-server *propserver*))


(attach-special-object-id nothing "csail.mit.edu/ProjectMAC/Propagators/Nothing")



#|
;;;;  Demo
;;; Assume that the password is "foo".

(define client (client-connect "127.0.0.1" propagators-port))
;Value: client

(define reval
  (client-access-service client 'eval "foo"))
;Value: reval


...


|#