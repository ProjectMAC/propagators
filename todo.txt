Major Tasks on the Revised Report:
- Install released system in MMP archive

- Make a nice version for DSpace and put it there
- Reformat in Scribble
- Go over the examples and make them look nice
  - Remove calls to constant
- Define vector and vector-ref (or even the fully generic ref)
  - unification on vectors in addition to on conses
    - there is no "occurs check"
    - Can we replicate the Y combinator inside merge?
- Check the lists of propagators carefully.
  - Autogenerate them?



Tweaks for the revised report:
- Update the README file
- Explicit access to propagators that merge, check equivalence,
  check contradictions?
- What is the right analogue of named let?
- (define-cell z (e:+ x y))
  (define-cell x (e:- z y))
  (define-cell y (e:- z x))
- (define-e:propagator ((addn n) x) ...)
- Resurrect the usefulness of the network-group data?  
- Resurrect the pictures?
  - ensure-cell had a strange, unexpected effect, namely on the
    identification of expression-orinented code, and the consequent
    boxing and naming thereof.
  - application causes trouble too
  - check the if macro
- initialize-scheduler really should properly clean up the neighbor
  lists of toplevel cells defined by e.g. define-propagator during
  system loading.  At the moment this is a non-problem, because
  ensure-cell makes the constants that initialize-scheduler blows away
  irrelevant, and because eager application means that no one
  (currently) actually attaches any propagators to those toplevel
  cells.  But if anyone did, those user propagators would need to be
  brushed off on initialize-scheduler.
- define-propagator should inspect the name being defined
  and select diagram vs expression definition style accordingly.
- application should probably gate the connections between the
  cells captured in a closure's environment and the cells actually
  given to each particular application of that closure (at least
  in the general case).
- Rename v&s-foo to use the contingent-foo naming scheme
- Reimplement contradiction handling using effects instead of
  a generic contradictory? operation?
- Make merge always produce a list of effects?
- Fix supported values so they print as #(contingent mumble)
- The discussion of "new partial information structures" should
  answer the question: "How do I decide what effect my partial
  information structure has as the control of a p:switch? as the
  control of a p:if?"


For the paper:
- carrying cons is made out of copying cons and deposit/examine

Post-monadic progress:
- Squeeze out uses of nary-unpacking where binary-mapping will suffice
  - Check each use of propagatify for using the right wrapper.
  - What's going on with (nary-unpacking (ineq-enforcer-func direction))?
  - What's going on with (v-c-i/o-unpacking (nary-unpacking f))?
  - Is it true that switch and accessors are the only uses left?
- Review the existing code in light of the understanding that
  autocomposition doesn't work; document map of which partial
  information structures are implemented; test them?
- Relate the results of that review to carrying cells;
- Math about what monads become in the new world order?
  - With the understanding that I am not trying to automatically compose them
- Return to electricity

Now:
- Nice pictures, data of me, Gerry, David; add Guy?
- Link to propagator page from the front page
- Link to propagator paper list?
- Do I want to link to the news article about me?

Pre-release:
- Profile the system in MIT Scheme 9.0.1 or later
- Draw pictures of the electrical circuits?
- Produce reference documentation of important program elements
  - Take the debugging utilities out of the introductory guide
- Proofread README; abstract "developer guide" from it?
- Refer to test-manager documentation
- Put the programmer guide on the web
- Cross-link propagator-oriented and Scheme-Propagators in the
  propagator guide and the ad

Massage:
- Tease apart Scmutils stuff from Scheme stuff?
- Extract draw.scm & co. into support/; abstract propagator stuff away from it?
- How many examples do I want to rewrite in expression style?
- Concept diagram?  (All the way down to test-manager/, MIT Scheme,
  and Scheme?)  With concept dependencies, "how to know what
  concept(s) you are looking at", "how to know what concept(s) you
  need for task X".
- rake workbook (lots of enscript, with some file names and chapter names)
- rake stats (count files, lines, words, syntactic tokens, etc)
- Are there more example networks to be extracted out of the unit tests?
- Write decent progress reporting for all the examples?
  - solve-puzzle returns the answer and is suitable for a silent test
  - do-puzzle has wallpaper and is suitable for the repl
- Is voltage-divider* an example or an extension or a test of an extension?
  - Is electric-parts.scm an extension or an example?  bridge-rectifier?
- Can I get away with
  (in-test-group mumble (load "mumble-test"))
  being the standard way to do things?
  Can I abstract that?
  - Automatically localizes everything in the test files
- Read through all the code from the top

- Make emacs highlight rtd:mumble?
- fail-all, for-each-consistent-state, and map-consistent-states are
  only used by the bridge rectifier.  (Which might be an example
  anyway).  But they are in principle more general.  Where should they
  go?
- Where does the stuff in extensions/test-utils.scm belong?
  - Where do random define-method calls go?
- Look through the file structure of the tests again?
- Does defhandler want to become define-handler?
- Convert propagators not to just be procedures?  Then I can type tag
  them nicely, and define custom unparser methods for them.
